// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MyTVFramework
import AVFoundation
import AdSupport
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import Combine
import CoreLocation
import CoreTelephony
import CryptoKit
import Foundation
import Kingfisher
import LinkPresentation
import MediaPlayer
import MobileCoreServices
@_exported import MyTVFramework
import NetworkExtension
import PhotosUI
import SQLite
import Social
import Swift
import SwiftUI
import SystemConfiguration
import TrueTime
import UIKit.UIImage
import UIKit
import VideoSubscriberAccount
import WebKit
import _AVKit_SwiftUI
import _Concurrency
import os.log
import os
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class CustomPlayerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func remoteControlReceived(with event: UIKit.UIEvent?)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class CustomAVPlayerViewController : AVKit.AVPlayerViewController {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func remoteControlReceived(with event: UIKit.UIEvent?)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ViewPagerModel : MyTVFramework.NavigationModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class InfinityData : Swift.Identifiable, Swift.Equatable {
  public var id: Swift.String
  public var hashId: Swift.Int
  public static func == (l: MyTVFramework.InfinityData, r: MyTVFramework.InfinityData) -> Swift.Bool
  public typealias ID = Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NavigationModel : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PageObservable : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ImagePickerModel : MyTVFramework.ComponentObservable {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class WebViewModel : MyTVFramework.ComponentObservable {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Rest {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class PageSceneObserver : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class MyTv {
  public init()
  public func setup(id: Swift.String? = nil, token: Swift.String? = nil)
  @objc deinit
}
public struct MyTvPlayer : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13MyTVFramework0A8TvPlayerV4bodyQrvp", 0) __
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class PlayerModel : MyTVFramework.ComponentObservable {
  open func reset()
  open func reload()
  open func isCompleted() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class ComponentObservable : Foundation.ObservableObject, Swift.Identifiable {
  final public let id: Swift.String
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers open class YTPlayerModel : MyTVFramework.ComponentObservable {
  @objc deinit
}
public enum YTPlayerState : Swift.String {
  case unstarted
  case ended
  case playing
  case paused
  case buffering
  case queued
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlaybackQuality : Swift.String {
  case small
  case medium
  case large
  case hd720
  case hd1080
  case highRes
  case auto
  case defaults
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlayerError : Swift.String {
  case invalidParam
  case html5Error
  case videoNotFound
  case notEmbeddable
  case cannotFindVideo
  case sameAsNotEmbeddable
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTPlayerCallback : Swift.String {
  case onReady
  case onStateChange
  case onPlaybackQualityChange
  case onError
  case onPlayTime
  case onYouTubeIframeAPIReady
  case onYouTubeIframeAPIFailedToLoad
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YTRegexPatterns : Swift.String {
  case embedUrl
  case adUrl
  case oAuth
  case staticProxy
  case syndication
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol YTPlayerViewDelegate {
  func playerViewDidBecomeReady(_ playerView: MyTVFramework.YTPlayerView)
  func playerView(_ playerView: MyTVFramework.YTPlayerView, didChangeTo state: MyTVFramework.YTPlayerState)
  func playerView(_ playerView: MyTVFramework.YTPlayerView, didChangeTo quality: MyTVFramework.YTPlaybackQuality)
  func playerView(_ playerView: MyTVFramework.YTPlayerView, receivedError error: MyTVFramework.YTPlayerError)
  func playerView(_ playerView: MyTVFramework.YTPlayerView, didPlayTime playTime: Swift.Float)
  func playerViewPreferredWebViewBackgroundColor(_ playerView: MyTVFramework.YTPlayerView) -> UIKit.UIColor
  func playerViewPreferredInitialLoadingView(_ playerView: MyTVFramework.YTPlayerView) -> UIKit.UIView?
}
extension MyTVFramework.YTPlayerViewDelegate {
  public func playerViewDidBecomeReady(_ playerView: MyTVFramework.YTPlayerView)
  public func playerView(_ playerView: MyTVFramework.YTPlayerView, didChangeTo state: MyTVFramework.YTPlayerState)
  public func playerView(_ playerView: MyTVFramework.YTPlayerView, didChangeTo quality: MyTVFramework.YTPlaybackQuality)
  public func playerView(_ playerView: MyTVFramework.YTPlayerView, receivedError error: MyTVFramework.YTPlayerError)
  public func playerView(_ playerView: MyTVFramework.YTPlayerView, didPlayTime playTime: Swift.Float)
  public func playerViewPreferredWebViewBackgroundColor(_ playerView: MyTVFramework.YTPlayerView) -> UIKit.UIColor
  public func playerViewPreferredInitialLoadingView(_ playerView: MyTVFramework.YTPlayerView) -> UIKit.UIView?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class YTPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) open var delegate: MyTVFramework.YTPlayerViewDelegate?
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, playerVars: [Swift.String : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func load(playlistId: Swift.String, playerVars: [Swift.String : Any]? = nil) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func playVideo()
  @_Concurrency.MainActor(unsafe) public func pauseVideo()
  @_Concurrency.MainActor(unsafe) public func stopVideo()
  @_Concurrency.MainActor(unsafe) public func seek(seekToSeconds: Swift.Float, allowSeekAhead: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func cue(videoId: Swift.String, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoId: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoId: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoUrl: Swift.String, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoUrl: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoUrl: Swift.String, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoUrl: Swift.String, startSeconds: Swift.Float, endSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(playlistId: Swift.String, index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func cue(videoIds: [Swift.String], index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(playlistId: Swift.String, index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func load(videoIds: [Swift.String], index: Swift.Int, startSeconds: Swift.Float, suggestedQuality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func nextVideo()
  @_Concurrency.MainActor(unsafe) public func previousVideo()
  @_Concurrency.MainActor(unsafe) public func playVideo(at index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func setPlaybackRate(_ rate: Swift.Float)
  @_Concurrency.MainActor(unsafe) public func getPlaybackRate(resultHandler: @escaping (Swift.Float) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getAvailablePlaybackRates(resultHandler: @escaping ([Swift.Float]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func set(loop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func set(shuffle: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func getVideoLoadedFraction(resultHandler: @escaping (Swift.Float) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getPlayerState(resultHandler: @escaping (MyTVFramework.YTPlayerState) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getCurrentTime(resultHandler: @escaping (Swift.Float) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func setPlaybackQuality(_ quality: MyTVFramework.YTPlaybackQuality)
  @_Concurrency.MainActor(unsafe) public func getPlaybackQuality(resultHandler: @escaping (MyTVFramework.YTPlaybackQuality) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getAvailableQualityLevels(resultHandler: @escaping ([MyTVFramework.YTPlaybackQuality]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getDuration(resultHandler: @escaping (Foundation.TimeInterval) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getVideoUrl(resultHandler: @escaping (Foundation.URL?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getVideoEmbedCode(resultHandler: @escaping (Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getPlaylist(resultHandler: @escaping ([Swift.String]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getPlaylistIndex(resultHandler: @escaping (Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MyTVFramework.YTPlayerView : WebKit.WKNavigationDelegate, WebKit.WKUIDelegate, WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(webView: WebKit.WKWebView, didFailNavigation navigation: WebKit.WKNavigation, withError error: Foundation.NSError)
}
extension MyTVFramework.YTPlayerState : Swift.Equatable {}
extension MyTVFramework.YTPlayerState : Swift.Hashable {}
extension MyTVFramework.YTPlayerState : Swift.RawRepresentable {}
extension MyTVFramework.YTPlaybackQuality : Swift.Equatable {}
extension MyTVFramework.YTPlaybackQuality : Swift.Hashable {}
extension MyTVFramework.YTPlaybackQuality : Swift.RawRepresentable {}
extension MyTVFramework.YTPlayerError : Swift.Equatable {}
extension MyTVFramework.YTPlayerError : Swift.Hashable {}
extension MyTVFramework.YTPlayerError : Swift.RawRepresentable {}
extension MyTVFramework.YTPlayerCallback : Swift.Equatable {}
extension MyTVFramework.YTPlayerCallback : Swift.Hashable {}
extension MyTVFramework.YTPlayerCallback : Swift.RawRepresentable {}
extension MyTVFramework.YTRegexPatterns : Swift.Equatable {}
extension MyTVFramework.YTRegexPatterns : Swift.Hashable {}
extension MyTVFramework.YTRegexPatterns : Swift.RawRepresentable {}
